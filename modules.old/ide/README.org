#+title: Modules: IDE:

* Table of Contents :TOC:
- [[#directory][Directory]]
  - [[#automate-creation-of-directory-modulesorg-readmeorg-for-each][automate creation of directory (Modules.org, README.org for each)]]
- [[#info][Info]]
- [[#modules][Modules]]
  - [[#neko-ideel][neko-ide.el]]
  - [[#neko-ide-lsp-modeel][neko-ide-lsp-mode.el]]
  - [[#neko-ide-eglotel][neko-ide-eglot.el]]

* Directory
- Modules :: [[file:../Modules.org]]

** TODO automate creation of directory (Modules.org, README.org for each)

* Info

* Modules

** neko-ide.el

This module configures and provides primarily IDE-related packages.

- compile :: a built-in package for compilation facilities.
  * set sane defaults.
- flycheck :: improved syntax checker (better version of flymake (built-in)).
  https://github.com/flycheck/flycheck
  * defer loading.

#+begin_src emacs-lisp :tangle neko-ide.el

  (use-package-local compile
    :custom
    (compilation-scroll-output t))

  (use-package flycheck
    :defer t)

  
  (provide 'neko-ide)

#+end_src

** neko-ide-lsp-mode.el

This module installs and sets sane defaults for lsp-mode, providing an IDE-like experience through LSP support and integration with complementary packages.

For more info on lsp-mode:
https://emacs-lsp.github.io/lsp-mode/

- lsp-mode :: LSP support for Emacs.
  * defer loading.
    * load package when either the =lsp= or =lsp-deferred= commands are run (set up autoloads for those two commands).
  * bind =C-c l= and =leader l= to the lsp-command-map (run lsp commands from there).
  * hook enabling which-key integration onto lsp-mode.
- corfu integration ::
  * TODO: relocate!

#+begin_src emacs-lisp :tangle neko-ide-lsp-mode.el

  (use-package lsp-mode
    ;; defer
    :defer t
    :commands (lsp lsp-deferred)
    ;; bind "C-c l" to lsp-command-map
    :custom (lsp-keymap-prefix "C-c l")
    :general-config
    (neko/leader-definer
      "l" lsp-command-map)
    ;; lsp-command-map which-key integration
    :hook (lsp-mode . lsp-enable-which-key-integration))

  ;; TODO: move this to corfu ?
  ;; if corfu is installed
  ;; (https://github.com/minad/corfu/wiki#configuring-corfu-for-lsp-mode)
  (use-package lsp-mode
    :defer t
    :after corfu
    :hook (lsp-completion-mode . my/lsp-mode-setup-completion)
    :init
    (defvar my/lsp-mode-setup-completion-type '(flex))
    (with-eval-after-load 'orderless
      (setq my/lsp-mode-setup-completion-type '(orderless)))
    (defun my/lsp-mode-setup-completion ()
      (setf (alist-get 'styles (alist-get 'lsp-capf completion-category-defaults))
            my/lsp-mode-setup-completion-type))
    :custom (lsp-completion-provider :none))

  
  (provide 'neko-ide-lsp-mode)

#+end_src

** TODO neko-ide-eglot.el

#+begin_src emacs-lisp :tangle neko-ide-eglot.el

  (use-package eglot
    :defer t)

  
  (provide 'neko-ide-eglot)

#+end_src
