#+title: Emacs

* wip

* Notes
+ Info on use-package `:custom` vs `:config setq` ::
  - ~:custom~ always evaluates block at the beginning reguardless of deferred loading.
  - ~:config setq~ is deferred if use-package is deferred.
  - So, for use-package inside modules, use ~:custom~, assuming it might be deferred.
  - And for use-module (loading modules), use ~:config setq~.
  - We cant use ~:custom~ for use-module, because that sets the value before loading the module.
+ M-TAB is C-M-i (HUGE)
+ C-c M-x is M-x but only for mode (HUGE)
* Organization

instead of depending on a crazy procedure to change variables in the future, what about just load a specific file? would GREATLY simplify.
instead of creating a components-exclude alist, just manually remove them.

./local
./personal
./components

1) early-init.el
   + prevent package.el from loading
   + set less garbage collection at startup
   + set paths to important dirs:
     - root
     - components
     - personal
     - special-config
     - local
   + set important variables
     - package-manager
     - benchmark
     - init-components
     - after-init-gc-cons-threshold
   + load ./personal/nekomimi/early-config.el to overwrite these variables
2) init.el
   + set new gc-cons-threshold for after init
   + crash if unmet reqs
   + recursively add all appropriate dirs to load-path
     - components
     - personal
   + set user-emacs-directory to local-dir (to isolate emacs-generated files)
   + Load necessary module loading macros.
   + Load necessary components (sane defs, pkg-manager, use-package, no-littering, post-init, etc).
   + Load customized variables file
   + Load userside components config file
   + Load all config files in personal-dir in lexigraphic order, with some exclusions
3) init/necessary components:
   1. modified loading macros
   2. sane defaults
   3. logging
   4. package manager
   5. use-package
   6. no-littering*
      READ THE FULL DOCS (SO CAN UNDERSTAND EVERYTHING)
      ACTUALLY LETS USE NO-LITTERING [see this: `geiser-repl-history-filename'].
      - compare the following settings to other emacs distros!
        https://idiomdrottning.org/bad-emacs-defaults
        below may be irrelevant now:
      #+begin_src emacs-lisp
        (setq backup-directory-alist `((".*" . ,(expand-file-name "backups/" user-emacs-directory))))
        (setq auto-save-file-name-transforms `((".*" ,(expand-file-name "auto-save/" user-emacs-directory) t)))
        (setq backup-by-copying t)
        (setq delete-old-versions t) ;; maybe? need a module auto way of deleting backups?

        ;; (setq tramp-persistency-file-name (expand-file-name "tramp" user-emacs-directory))
        (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
        ;; (load custom-file 'noerror) ;; need?
        (setq eshell-history-file-name (expand-file-name "eshell/history" user-emacs-directory))
        (setq org-agenda-files (list (expand-file-name "org/agenda.org" user-emacs-directory)))
        (setq org-id-locations-file (expand-file-name "org/org-id-locations" user-emacs-directory))
        (setq url-history-file (expand-file-name "url/history" user-emacs-directory))
      #+end_src
   7. package dependencies (general.el, which-key, ...)
   8. function dependencies (featurep-first, ...)
4) components:
   * base:
     - sane-tweaks
     - buffers
     - improve existing (helpful.el, savehist, ...)
     - windows
   * keybinds:
     - evil
     - meow
     - meow-dvp
     - meow-qwerty
     - swap-x-and-u
   * lang:
     - general*
     - java, lisp, lisp-adv, scheme,
   * misc:
     - todo
     - server
     - guix
   * org:
     - org
     - workflow
   * completion:
     - vertico
     - ivy
   * pretty:
     - dashboard
     - fun
     - theme
     - transparency
   * programs:
     - dired
     - dirvish
     - magit
     - terminal
   * tutorial:
     - tutorials
   * ui:
     - line-numbers
     - modeline
     

** init.el
