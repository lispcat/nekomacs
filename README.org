#+title: nekomimi

* wip

* Name ideas
nekomimi
neko-emacs (aka. nekomacs)

* Why another emacs distribution?

Besides creating a very nice personal configuration, I found myself frustrated with all the Emacs distributions out there that I've tried. Most of them have a very thick layer of abstraction over vanilla Emacs, which makes both debugging and understanding Emacs on a deeper level much harder to do. I also wanted an ideal Emacs distribution I could point to for friends wanting to try out Emacs---especially a distribution I understand every nook and cranny of. Which led me to turn my personal configuration into this distro.

* Philosophy

Aims for this Emacs distro:
- Modular
- Simple
- Hackable
- Creates as little of a layer of abstraction as possible
- "Just-works" out of the box, but can be easily and selectively stripped down to near-vanilla Emacs
- Keep startup time relatively fast

The pathway for most Emacs users (including myself) is starting off with a very "just-works" distro, then switching over to something more minimal, or vanilla Emacs entirely. I wanted to ease this transition as much as possible by making everything as modular and easily hackable as possible, allowing the user to get as close to vanilla Emacs as necessary while staying on this distribution. Think of it as something similar to a pre-made NixOS configuration, where you can easily blacklist, replace, or write and add your own modules to the config, making it so you can slowly tweak it into your own.

* Installing

* Documentation

There is extensive documentation in the following files:
- [[file:modules/README.org]] :: in-depth docs on each provided module

* Technical overview

For more technical info, refer to [[file:Info.org][Info.org]]

It's composed of the following parts (loaded in order):
- [[file:early-init.el][early-init.el]] ::
  Creates variables that are used later. Can be overwritten.
- [[file:init.el][init.el]] ::
  Updates the load-path, does some necessary things, and loads the following:
  - [[file:core/][core/##-*]] ::
    A series of files that sets up the package manager, use-package, hard dependencies, and etc. Must be loaded in a specific order.
  - [[file:personal/nekomimi/modules.el][personal/nekomimi/modules.el]] ::
    A user-side config file to specify which modules from [[file:modules/][modules/**]] should be loaded.
  - [[file:personal/][personal/*]] ::
    The user-side configuration directory. Any elisp files placed here will be loaded.

* Personal

** Notes

+ Info on use-package `:custom` vs `:config setq` ::
  - ~:custom~ always evaluates block at the beginning reguardless of deferred loading.
  - ~:config setq~ is deferred if use-package is deferred.
  - So, for use-package inside modules, use ~:custom~, assuming it might be deferred.
  - And for use-module (loading modules), use ~:config setq~.
  - We cant use ~:custom~ for use-module, because that sets the value before loading the module.
+ M-TAB is C-M-i (HUGE)
+ C-c M-x is M-x but only for mode (HUGE)
+ C-M-SPC for selection (HUGE)
+ consult-ripgrep is very op

** Ideas/todo

: "s" search-map
: "bs" 'save-buffer
(and also ~"S" 'save-buffer~)

and instead of
: "sn" 'consult-notes
do
: (define-key 'search-map (kbd "n") #'consult-notes)

^
actually, lets just use ~"sn" 'consult-notes~ for everything. ~M-s~ is barely even used for anything useful anyways.


instead of ~neko/~, use ~neko-~, so it looks and feels more like a package rather than an abstraction layer.


~(nekowrap~: literally just progn but with soft-error handling.
- instead of having a modules file, just throw in the requires by hand into files of your own choosing.
- this'll make it so my module system is more scattered and sporadic, and letting the end user use modules not as a whole thing, but as big snippets to smoothen out and get sane defaults that work nicely.
- and in my docs, i can have a listing of all the submodules of modules that add extra extra functionality, like java-eglot.el. And i can write an interactive function to search throught modules and jump to definitions!!!!!!


get rid of modules fil, use config.el in dir (or maybe a file for each dir and call it config-code.el


create an examples dir, and make it so you can pass an arg to load the example (in case you bork your config).
also create a backups dir, that you can load into with arg and argument. have _backups dir (underscore to exclude).


~+catch~ to catch errors

: (neko-progn
:   (tab-bar-mode 1))


- casual-dired
- casual-ibuffer : C-c b l : select and delete a bunch of buffers (incredible buffer managerment!!!) (kill all help buffers)
- have a neko-casual-dired.el below neko-dired.el
- casual-info
- casual-calc
- RE-BUILDER
- casual-agenda


for finding files in a project: project-dired... or consult-buffer + =p SPC=. (very helpful)


have big core config files instead of smaller chunks, then wrap each use-package statement in a function of a predictable naming scheme, and create a macro that given a name, runs the function.

have tangle block for the +require expression (to config-example.el)


TODO: implement optional layout file output and create a patch for river fork, for diff versions.

very good resources
https://github.com/jonnay/emagicians-starter-kit
https://github.com/thinkhuman/writingwithemacs

for early-init.el and init.el, use funcalls for setup? simplify? instead of having a bunch of files to load for init?


* Organization

instead of depending on a crazy procedure to change variables in the future, what about just load a specific file? would GREATLY simplify.
instead of creating a components-exclude alist, just manually remove them.

./local
./personal
./components

1) early-init.el
   + prevent package.el from loading
   + set less garbage collection at startup
   + set paths to important dirs:
     - root
     - components
     - personal
     - special-config
     - local
   + set important variables
     - package-manager
     - benchmark
     - init-components
     - after-init-gc-cons-threshold
   + load ./personal/nekomimi/early-config.el to overwrite these variables
2) init.el
   + set new gc-cons-threshold for after init
   + crash if unmet reqs
   + recursively add all appropriate dirs to load-path
     - components
     - personal
   + set user-emacs-directory to local-dir (to isolate emacs-generated files)
   + Load necessary module loading macros.
   + Load necessary components (sane defs, pkg-manager, use-package, no-littering, post-init, etc).
   + Load customized variables file
   + Load userside components config file
   + Load all config files in personal-dir in lexigraphic order, with some exclusions
3) init/necessary components:
   1. modified loading macros
   2. sane defaults
   3. logging
   4. package manager
   5. use-package
   6. no-littering*
      READ THE FULL DOCS (SO CAN UNDERSTAND EVERYTHING)
      ACTUALLY LETS USE NO-LITTERING [see this: `geiser-repl-history-filename'].
      - compare the following settings to other emacs distros!
        https://idiomdrottning.org/bad-emacs-defaults
        below may be irrelevant now:
      #+begin_src emacs-lisp
        (setq backup-directory-alist `((".*" . ,(expand-file-name "backups/" user-emacs-directory))))
        (setq auto-save-file-name-transforms `((".*" ,(expand-file-name "auto-save/" user-emacs-directory) t)))
        (setq backup-by-copying t)
        (setq delete-old-versions t) ;; maybe? need a module auto way of deleting backups?

        ;; (setq tramp-persistency-file-name (expand-file-name "tramp" user-emacs-directory))
        (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
        ;; (load custom-file 'noerror) ;; need?
        (setq eshell-history-file-name (expand-file-name "eshell/history" user-emacs-directory))
        (setq org-agenda-files (list (expand-file-name "org/agenda.org" user-emacs-directory)))
        (setq org-id-locations-file (expand-file-name "org/org-id-locations" user-emacs-directory))
        (setq url-history-file (expand-file-name "url/history" user-emacs-directory))
      #+end_src
   7. package dependencies (general.el, which-key, ...)
   8. function dependencies (featurep-first, ...)
