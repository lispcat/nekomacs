#+title: neko-emacs

* Why another emacs distribution?

Besides creating a very nice personal configuration, I found myself frustrated with all the Emacs distributions out there that I've tried. Most of them have a very thick layer of abstraction over vanilla Emacs, which makes both debugging and understanding Emacs on a deeper level much harder to do. I also wanted an ideal Emacs distribution I could point to for friends wanting to try out Emacs---especially a distribution I understand every nook and cranny of. Which led me to turn my personal configuration into this Emacs distro.

* Philosophy

Aims for this Emacs distro:
- Modular
- Simple
- Hackable
- Creates as little of a layer of abstraction over vanilla Emacs as possible
- "Just-works" out of the box, but can be easily modified
- Keep startup time relatively fast

The pathway for most Emacs users (including myself) is starting off with a very "just-works" distro, then switching over to something more minimal, or vanilla Emacs entirely. I wanted to ease this transition as much as possible by making everything as modular and easily hackable as possible, allowing the user to get as close to vanilla Emacs as necessary while staying on this distribution. Think of it as something similar to a pre-made NixOS configuration, where you can easily blacklist, replace, or write and add your own modules to the config, making it so you can slowly tweak it into your own.

* Installing

#+begin_src shell
[ -d "$HOME/.emacs.d" ] && mv ~/.emacs.d ~/.emacs.d.old
git clone --depth 1 https://github.com/lispcat/nekomimi.git ~/.emacs.d
emacs
#+end_src

* Documentation

There is extensive documentation on each module in the following file:
- [[file:modules/Modules.org][Modules.org]]

* Technical overview

- [[file:early-init.el][early-init.el]] :: should not be edited, initializes variables.
  - [[file:personal/early-config.el][personal/early-config.el]] :: to be edited, to overwrite settings in early-init.el.
- [[file:init.el][init.el]] :: should not be edited, loads init files and user-side files
  - [[file:init][init/*]] :: loaded by init.el, necessary or highly recommended to be loaded.
  - [[file:personal/main.el][personal/main.el]] :: loaded by init.el, the main user-side configuration file.

- [[file:modules/neko-modules.el][modules/neko-modules.el]] :: contains a list of functions that provide each "module" to be loaded from personal/main.el.

* Personal

** Notes

+ Info on use-package `:custom` vs `:config setq` ::
  - ~:custom~ always evaluates block at the beginning reguardless of deferred loading.
  - ~:config setq~ is deferred if use-package is deferred.
  - So, for use-package inside modules, use ~:custom~, assuming it might be deferred.
  - And for use-module (loading modules), use ~:config setq~.
  - We cant use ~:custom~ for use-module, because that sets the value before loading the module.
+ M-TAB is C-M-i (HUGE)
+ C-c M-x is M-x but only for mode (HUGE)
+ C-M-SPC for selection (HUGE)
+ consult-ripgrep is very op
+ for new setup, create file for each C-c map bind? like one only for applications?

** Ideas/todo

- [X] "s" search-map
- [X] "bs" 'save-buffer
- [ ] (and also ~"S" 'save-buffer~)

instead of ~neko/~, use ~neko-~, so it looks and feels more like a package rather than an abstraction layer.

~(+progn~: literally just progn but with soft-error handling.
- instead of having a modules file, just throw in the requires by hand into files of your own choosing.
- this'll make it so my module system is more scattered and sporadic, and letting the end user use modules not as a whole thing, but as big snippets to smoothen out and get sane defaults that work nicely.
- and in my docs, i can have a listing of all the submodules of modules that add extra extra functionality, like java-eglot.el. And i can write an interactive function to search throught modules and jump to definitions!!!!!!


- [X] get rid of modules fil, use config.el in dir (or maybe a file for each dir and call it config-code.el


- [ ] create an examples dir, and make it so you can pass an arg to load the example (in case you bork your config).
also create a backups dir, that you can load into with arg and argument. have _backups dir (underscore to exclude).


~+catch~ to catch errors

: (neko-progn
:   (tab-bar-mode 1))


- [ ] casual-dired
- [ ] casual-ibuffer : C-c b l : select and delete a bunch of buffers (incredible buffer managerment!!!) (kill all help buffers)
- [ ] have a neko-casual-dired.el below neko-dired.el
- [ ] casual-info
- [ ] casual-calc
- [ ] RE-BUILDER
- [ ] casual-agenda

for finding files in a project: project-dired... or consult-buffer + =p SPC=. (very helpful)


- [X] have big core config files instead of smaller chunks, then wrap each use-package statement in a function of a predictable naming scheme, and create a macro that given a name, runs the function.

- [X] have tangle block for the +require expression (to config-example.el)

very good resources
https://github.com/jonnay/emagicians-starter-kit
https://github.com/thinkhuman/writingwithemacs

- [X] for early-init.el and init.el, use funcalls for setup? simplify? instead of having a bunch of files to load for init?

- [X] in personal-dir, load only one file main.el (also have early-config.el in personal-dir. load modules from here. expect the end user to create subdirs dirs to organize their setup.

- [X] instead of require'ing every core module at startup, turn everything into a little function, so you can choose which set of functions to evaluate during early-config. (an alist of functions to call).

- [ ] image-slicing, hook to reslice image after org-download image!!!

- [X] switch to core-new. idea: for init/modules-dependencies, move this over to a source file instead of a function, so that use-package general function will eval with no issue?

  - [X] actually, lets just switch to libraries for Init.org instead of functions, to ensure that all necessary use-package declarations are evaluated now (still confused...)

  - [X] ok i get the issue now, when the source file is require'd, the macros are expanded. however, the macros are not available at function define time. everything needs to be evaled before hand.

- [ ] Rename all neko/ stuff in init to init/ ?
